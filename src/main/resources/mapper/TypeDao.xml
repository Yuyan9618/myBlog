<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzy.dao.TypeDao">

    <!--新增分类-->
    <insert id="saveType" parameterType="com.zzy.entity.Type">
        insert into t_type values (#{id}, #{name})
    </insert>

    <!--删除分类-->
    <delete id="deleteType">
        delete from t_type where id = #{id};
    </delete>

    <!--修改分类-->
    <update id="updateType" parameterType="com.zzy.entity.Type">
        update t_type set name = #{name} where id = #{id};
    </update>

    <!--根据id查询分类-->
    <select id="getType" resultType="com.zzy.entity.Type">
        SELECT id,name from t_type where id = #{id};
    </select>

    <!--根据分类名称查询分类-->
    <select id="getTypeByName" resultType="com.zzy.entity.Type">
        select * from t_type where name = #{name};
    </select>

    <!--查询所有分类-->
    <select id="getAllType" resultType="com.zzy.entity.Type">
        select * from t_type;
    </select>

    <!--查询所有分类-->
    <!--跟持久层接口对应，博客和分类是多对一的关系，一篇博客对应一个分类，一个分类可以对应多篇博客，因此要用Mybatis的多表查询-->
    <resultMap id="type" type="com.zzy.entity.Type">
        <id property="id" column="tid" />
        <result property="name" column="name" />
        <collection property="blogs" ofType="com.zzy.entity.Blog">
            <id property="id" column="bid" />
            <result property="title" column="title" />
            <result property="typeId" column="type_id" />
        </collection>
    </resultMap>
    <!--查询分类-->
    <select id="getAllTypeAndBlog" resultMap="type">
        select t.id tid,t.name,b.id bid,b.title,b.type_id
        from t_type t,t_blog b
        where t.id = b.type_id
    </select>
</mapper>

        <!--parameterType属性：用于指定传入参数的类型，传入的是一个类的对象，所以写全类名-->

        <!--resultType属性：用于指定结果集的类型-->

        <!--#{ } 字符：代表占位符，类似 jdbc 中的 ？，用于执行语句时替换实际的数据-->