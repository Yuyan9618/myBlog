<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzy.dao.BlogDao">

    <!--新增保存博客-->
    <insert id="saveBlog" parameterType="com.zzy.entity.Blog">
        insert into t_blog (id,title, content, first_picture, flag,
                                   views, comment_count, appreciation, share_statement, commentabled, published,
                                   recommend, create_time, update_time, type_id, user_id, description)
        values (#{id},#{title},#{content},#{firstPicture},#{flag},#{views},#{commentCount},#{appreciation},
                #{shareStatement},#{commentabled},#{published},#{recommend},#{createTime},
                #{updateTime},#{typeId},#{userId},#{description});
    </insert>

    <!--删除博客-->
    <delete id="deleteBlog">
        delete from t_blog where id = #{id}
    </delete>

    <!--查询出要修改的博客-->
    <select id="getBlogById" resultType="com.zzy.queryvo.ShowBlog">
        select b.id,b.flag,b.title,b.content,b.type_id,b.first_picture,b.description,
               b.recommend,b.published,b.share_statement,b.appreciation,b.commentabled
        from t_blog  b  where  b.id = #{id};
    </select>
    <!--修改博客-->
    <update id="updateBlog" parameterType="com.zzy.queryvo.ShowBlog">
        update t_blog set published = #{published},flag = #{flag},title = #{title}, content = #{content}, type_id = #{typeId},
        first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend},share_statement = #{shareStatement}, appreciation = #{appreciation},
        commentabled = #{commentabled} ,update_time = #{updateTime} where id = #{id};
    </update>

    <!--搜索博客-->
    <!--bind：bind标签可以使用OGNL表达式创建一个变量并将其绑定到上下文中-->
    <!--name属性：为绑定到上下文的变量名-->
    <!--value属性：为OGNL表达式-->
    <select id="searchByTitleAndType" parameterType="com.zzy.queryvo.SearchBlog" resultMap="blog">
        <bind name="pattern" value="'%' + title + '%'" />
        select b.id,b.title,b.type_id,t.id,t.name from t_blog b, t_type t
        <where>
            <if test="1 == 1">
                b.type_id = t.id
            </if>
            <if test="typeId != null">
                and b.type_id = #{typeId}
            </if>
            <if test="title != null">
                and b.title like #{pattern}
            </if>
        </where>
    </select>

    <!--查询博客管理列表多对一配置-->
    <resultMap id="blog" type="com.zzy.queryvo.BlogQuery">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="updateTime" column="update_time"/>
        <result property="recommend" column="recommend"/>
        <result property="published" column="published"/>
        <result property="typeId" column="type_id"/>
        <association property="type" javaType="com.zzy.entity.Type">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
        <!--resultMap属性：用于映射查询结果，这里定义封装BlogQuery的resultMap-->
        <!--association属性：用于一对一和多对一的关系，把Type实体映射从association元素中提取出来，用一个resultMap元素表示-->
        <!--property属性：关联查询的结果集存储在BlogQuery对象哪个属性上-->
        <!--javaType属性：用来指定对象所属的java数据类型-->
    </resultMap>
    <!--查询博客管理列表-->
    <select id="getAllBlogQuery" resultMap="blog">
        select b.id,b.title,b.update_time,b.recommend,b.published,b.type_id,t.id,t.name from t_blog as b
        left outer join t_type as t on b.type_id = t.id
        order by b.update_time desc
    </select>

    <!--查询首页最新博客列表信息-->
    <resultMap id="firstPageBlog" type="com.zzy.queryvo.FirstPageBlog">
        <id property="id" column="id" />
        <result property="title" column="title" />
        <result property="firstPicture" column="first_picture" />
        <result property="views" column="views" />
        <result property="commentCount" column="comment_count" />
        <!--<result property="createTime" column="create_time" />-->
        <result property="updateTime" column="update_time" />
        <result property="description" column="description" />
        <result property="typeName" column="name" />
        <result property="nickname" column="nickname" />
        <result property="avatar" column="avatar" />
    </resultMap>
    <select id="getFirstPageBlog" resultMap="firstPageBlog">
        select b.id,b.title,b.first_picture, b.views, b.comment_count,b.create_time,b.update_time,b.description,
               t.name ,
               u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id = t.id and  u.id = b.user_id order by b.create_time desc
    </select>

    <!--查询推荐文章-->
    <select id="getAllRecommendBlog" resultType="com.zzy.queryvo.RecommendBlog">
        select * from t_blog where t_blog.recommend = true order by t_blog.create_time desc limit 4;
    </select>

    <!--搜索文章-->
    <select id="getSearchBlog" resultMap="firstPageBlog">
        <bind name="pattern" value="'%' + query + '%'" />
        select b.id,b.title,b.first_picture, b.views,b.comment_count,b.update_time,b.description,
        t.name ,
        u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id = t.id and  u.id = b.user_id and (b.title like #{pattern} or b.content like  #{pattern})
        order by b.update_time desc
    </select>

    <!--统计博客信息-->
    <select id="getBlogTotal" resultType="Integer">
        select count(*) from t_blog
    </select>
    <select id="getBlogViewTotal" resultType="Integer">
        select coalesce (sum(views),0) from t_blog;
    </select>
    <select id="getBlogCommentTotal" resultType="Integer">
        select count(*) from t_comment;
    </select>
    <!--<select id="getBlogMessageTotal" resultType="Integer">-->
        <!--select count(*) from t_message-->
    <!--</select>-->

    <!--博客详情查询-->
    <resultMap id="detailedBlog" type="com.zzy.queryvo.DetailedBlog">
        <id property="id" column="bid"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="flag" column="flag"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="typeName" column="name"/>
        <result property="views" column="views"/>
        <result property="commentCount" column="comment_count"/>
        <result property="updateTime" column="update_time"/>
        <result property="commentabled" column="commentabled"/>
        <result property="shareStatement" column="share_statement"/>
        <result property="appreciation" column="appreciation"/>
        <result property="nickname" column="nickname"/>
        <result property="avatar" column="avatar"/>
    </resultMap>
    <select id="getDetailedBlog" resultMap="detailedBlog">
        select b.id bid,b.first_picture,b.flag,b.title,b.content,b.views,b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation, u.nickname,u.avatar,t.name
        from t_blog b,t_user u, t_type t
        where b.user_id = u.id and b.type_id = t.id and b.id = #{id}
    </select>

    <!--文章访问次数自增-->
    <update id="updateViews" parameterType="com.zzy.entity.Blog">
        update t_blog b set b.views = b.views+1 where b.id = #{id}
    </update>

    <!--查询出评论数量并更新-->
    <update id="getCommentCountById" parameterType="com.zzy.entity.Blog">
        update t_blog b set b.comment_count = (
          select count(*) from t_comment c where c.blog_id = #{id} and b.id = #{id}
        ) where b.id = #{id}
    </update>

    <!--根据TypeId查询博客列表，显示在分类首页-->
    <select id="getByTypeId" resultMap="firstPageBlog">
        select b.id,b.title,b.first_picture, b.views, b.comment_count, b.update_time, b.description,t.name ,u.nickname, u.avatar
        from t_blog b, t_type t,t_user u
        where b.type_id=t.id and u.id=b.user_id and b.type_id=#{typeId} order by b.update_time desc
    </select>
</mapper>


